import sys

rv_nuc = {
	"A" : "T",
	"T" : "A",
	"C" : "G",
	"G" : "C",
}

def read_sequence(seq_file):
    f = file(seq_file,'r') #opens input file
    seq = '' 
    for l in f:
    	if l.startswith(">"):#skip header line
            continue 
        seq += l.rstrip().upper().replace('U', 'T') 
    f.close() #closes input file
    return seq

def kmer(k, seq):
 	rev_seq = ''
 	for letter in range(len(seq)):
 		rev_seq += rv_nuc[seq[::-1][letter]]
	seq = seq + rev_seq
 
	f = {} #blank dictionary to put k-kmers in 
	total_kmers = len(seq) - k + 1
	for i in range(total_kmers):
		kmer = seq[i:i+k]
		f[kmer] = f.get(kmer, 0) + 1
	kmer = [key for key,val in f.iteritems() if val == max(f.values())] #collects max kmers
	maxkey = [val for key,val in f.iteritems() if val == max(f.values())] #collects max counts
	print 'max count:',max(maxkey)
	print 'max','%s%s' % (k,'-mers:'),'%s' % ' '.join(kmer)

def main(k,filename):
	seq = read_sequence(filename)
	kmers = kmer(int(k), seq)

if __name__ == '__main__':
	main(sys.argv[1], sys.argv[2])


####################################################

import sys
import re

nt_code = {
 "A" : "A",
 "T" : "T",
 "C" : "C",
 "G" : "G",
 "R" : "[AG]",
 "Y" : "[CT]",
 "S" : "[GC]",
 "W" : "[AT]",
 "K" : "[GT]",
 "M" : "[AC]",
 "B" : "[CGT]",
 "D" : "[AGT]",
 "H" : "[ACT]",
 "V" : "[ACG]",
 "N" : "[ATCG]"
}

rev_nt_code = {
 "A" : "T",
 "T" : "A",
 "C" : "G",
 "G" : "C",
 "R" : "[TC]",
 "Y" : "[GA]",
 "S" : "[GC]",
 "W" : "[AT]",
 "K" : "[CA]",
 "M" : "[TG]",
 "B" : "[CGA]",
 "D" : "[ACT]",
 "H" : "[AGT]",
 "V" : "[TCG]",
 "N" : "[ATCG]"
}

def read_sequence(seq_file):
    f = file(seq_file,'r') #opens input file
    seq = '' 
    for l in f:
    	if l.startswith(">"):#skip header line
            continue 
        seq += l.rstrip().upper() 
    f.close() #closes input file
    return seq

def match(seq, dna_frag):
	fwd_pattern = ''
	for letter in range(len(dna_frag)):
		fwd_pattern += nt_code[dna_frag[letter]] #create regex for matching using dictionary
 	
 	regex_fwd = re.compile(fwd_pattern) 
 	count = 0
 	
 	for match in regex_fwd.finditer(seq):
 		count = count + 1 
 		position_num = '%s' % match.start()
 		print 'position is:', int(position_num)+1 #first position is 1 instead of 0 
 		print 'motif is:', '%s' % match.group() #the sequence of each forward match

 	rv_pattern = ''
 	for letter in range(len(dna_frag)):
 		rv_pattern += rev_nt_code[dna_frag[::-1][letter]]
 	
 	regex_rv = re.compile(rv_pattern)
 	
 	for match in regex_rv.finditer(seq):
 		count = count + 1
 		position_num = '%s' % match.start()
 		print 'position is:', int(position_num)+1
 		print 'motif is:', '%s' % match.group(), '(reverse strand)'#the sequence of each reverse match

 	print 'total number of matches is:', count #the number of matches

def main(seq_file, dna_frag):
    seq = read_sequence(seq_file)
    search = match(seq, dna_frag)

if __name__ == "__main__":
    main(sys.argv[1],sys.argv[2]) 
###################################################


 def normalize(self, pseudocounts=None): 
254          """Create and return a position-weight matrix by normalizing the counts matrix. 
255   
256          If pseudocounts is None (default), no pseudocounts are added 
257          to the counts. 
258   
259          If pseudocounts is a number, it is added to the counts before 
260          calculating the position-weight matrix. 
261   
262          Alternatively, the pseudocounts can be a dictionary with a key 
263          for each letter in the alphabet associated with the motif. 
264          """ 
265          counts = {} 
266          if pseudocounts is None: 
267              for letter in self.alphabet.letters: 
268                  counts[letter] = [0.0] * self.length 
269          elif isinstance(pseudocounts, dict): 
270              for letter in self.alphabet.letters: 
271                  counts[letter] = [float(pseudocounts[letter])] * self.length 
272          else: 
273              for letter in self.alphabet.letters: 
274                  counts[letter] = [float(pseudocounts)] * self.length 
275          for i in range(self.length): 
276              for letter in self.alphabet.letters: 
277                  counts[letter][i] += self[letter][i] 
278          # Actual normalization is done in the PositionWeightMatrix initializer 
          return PositionWeightMatrix(self.alphabet, counts) 




###################################################
###################################################


# Make pfm (sites, k=7)
# Make ppm (pfm,k=7)
# Find best kmer (sequence,ppm,k=7)
# score - return float type sequence (kmer,ppm)
# information content  (ppm,k=7)
















